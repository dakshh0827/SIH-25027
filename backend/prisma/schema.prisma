generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  farmer
  manufacturer
  lab
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String
  email             String             @unique
  password          String
  role              Role
  adminProfile      AdminProfile?
  farmerProfile     FarmerProfile?
  manufacturerProfile ManufacturerProfile?
  laboratoryProfile LaboratoryProfile?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model AdminProfile {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  adminId         String  @unique // This is now auto-generated
  idProofUrl      String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String  @unique @db.ObjectId
}

model FarmerProfile {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  fpoName                String
  regNumber              String    @unique
  pan                    String    @unique
  gstin                  String    @unique
  registeredAddress      String
  authorizedRepresentative String
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String    @unique @db.ObjectId
  harvests               Harvest[]
}

model ManufacturerProfile {
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  manufacturerName       String
  ayushLicenseNumber     String              @unique
  registrationNumber     String              @unique
  pan                    String              @unique
  gstin                  String              @unique
  registeredAddress      String
  authorizedRepresentative String
  user                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String              @unique @db.ObjectId
  reports                ManufacturingReport[]
  // FIXED: Removed the 'labReports' relation to make the models independent.
}

model LaboratoryProfile {
  id                       String      @id @default(auto()) @map("_id") @db.ObjectId
  labName                  String
  nablAccreditationNumber  String      @unique
  scopeOfNablAccreditation String
  pan                      String      @unique
  gstin                    String      @unique
  registeredAddress        String
  authorizedRepresentative String
  user                     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String      @unique @db.ObjectId
  reports                  LabReport[]
}

model Harvest {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  identifier      String        @unique
  herbSpecies     String
  harvestWeightKg Float
  harvestSeason   String
  location        String
  harvestProofUrl String
  status          String        @default("completed")
  submittedBy     FarmerProfile @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String        @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  recordedAt      DateTime      @default(now())
  notes           String?
  regulatoryTags  String[]
}

model ManufacturingReport {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  identifier              String        @unique
  batchId                 String        @unique
  herbUsed                String
  quantityUsedKg          Float
  processingSteps         String
  status                  String        @default("in-progress")
  createdBy               ManufacturerProfile @relation(fields: [manufacturerProfileId], references: [id])
  manufacturerProfileId   String        @db.ObjectId
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  effectiveDate           DateTime      @default(now())
  expiryDate              DateTime?
  notes                   String?
  regulatoryTags          String[]
}

model LabReport {
  id                        String             @id @default(auto()) @map("_id") @db.ObjectId
  identifier                String             @unique
  testType                  String
  testResult                String
  labReportFileUrl          String
  status                    String             @default("final")
  
  createdBy                 LaboratoryProfile @relation(fields: [laboratoryProfileId], references: [id])
  laboratoryProfileId       String            @db.ObjectId
  
  // FIXED: This is now a simple string field with no relation.
  manufacturingReportId     String
  
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  effectiveDate             DateTime           @default(now())
  issuedDate                DateTime           @default(now())
  notes                     String?
  regulatoryTags            String[]
}