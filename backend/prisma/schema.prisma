generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model QRTracker {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  qrCode            String             @unique // The QR code string/hash
  productName       String?            // Product name (set by manufacturer)
  batchId           String?            // Manufacturing batch ID
  status            QRStatus           @default(INITIALIZED)
  isPublic          Boolean            @default(false) // Whether it's accessible to consumers
  
  // Primary linking field - harvest identifier (human-readable)
  harvestIdentifier String             @unique // Links all reports through this identifier
  
  // Metadata
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  stageCompletions  Json               // Track which stages are completed
  publicUrl         String?            // Public URL for consumer access
  
  @@map("qr_trackers")
}

enum QRStatus {
  INITIALIZED      // Created with harvest
  MANUFACTURING    // Manufacturing data added
  TESTING         // Lab testing data added  
  COMPLETED       // All stages completed
  PUBLIC          // Made available to consumers
}

enum Role {
  admin
  farmer
  manufacturer
  lab
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String
  email             String             @unique
  password          String
  role              Role
  adminProfile      AdminProfile?
  farmerProfile     FarmerProfile?
  manufacturerProfile ManufacturerProfile?
  laboratoryProfile LaboratoryProfile?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model AdminProfile {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  adminId         String  @unique // This is now auto-generated
  idProofUrl      String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String  @unique @db.ObjectId
}

model FarmerProfile {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  fpoName                String
  regNumber              String    @unique
  pan                    String    @unique
  gstin                  String    @unique
  registeredAddress      String
  authorizedRepresentative String
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String    @unique @db.ObjectId
  harvests               Harvest[]
}

model ManufacturerProfile {
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  manufacturerName       String
  ayushLicenseNumber     String              @unique
  registrationNumber     String              @unique
  pan                    String              @unique
  gstin                  String              @unique
  registeredAddress      String
  authorizedRepresentative String
  user                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String              @unique @db.ObjectId
  reports                ManufacturingReport[]
}

model LaboratoryProfile {
  id                       String      @id @default(auto()) @map("_id") @db.ObjectId
  labName                  String
  nablAccreditationNumber  String      @unique
  scopeOfNablAccreditation String
  pan                      String      @unique
  gstin                    String      @unique
  registeredAddress        String
  authorizedRepresentative String
  user                     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String      @unique @db.ObjectId
  reports                  LabReport[]
}

model Harvest {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  identifier      String        @unique // Human-readable identifier (e.g., HARV-2025-001)
  herbSpecies     String
  harvestWeightKg Float
  harvestSeason   String
  location        String
  harvestProofUrl String
  status          String        @default("completed")
  submittedBy     FarmerProfile @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String        @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  recordedAt      DateTime      @default(now())
  notes           String?
  regulatoryTags  String[]
}

model ManufacturingReport {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  identifier              String        @unique // Human-readable identifier (e.g., MFG-2025-001)
  batchId                 String        @unique
  herbUsed                String
  quantityUsedKg          Float
  processingSteps         String
  status                  String        @default("in-progress")
  
  // Links to harvest through human-readable identifier
  harvestIdentifier       String        // References Harvest.identifier
  
  createdBy               ManufacturerProfile @relation(fields: [manufacturerProfileId], references: [id])
  manufacturerProfileId   String        @db.ObjectId
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  effectiveDate           DateTime      @default(now())
  expiryDate              DateTime?
  notes                   String?
  regulatoryTags          String[]
}

model LabReport {
  id                        String             @id @default(auto()) @map("_id") @db.ObjectId
  identifier                String             @unique // Human-readable identifier (e.g., LAB-2025-001)
  testType                  String
  testResult                String
  labReportFileUrl          String
  status                    String             @default("final")
  
  // Links to harvest through human-readable identifier
  harvestIdentifier         String             // References Harvest.identifier
  
  createdBy                 LaboratoryProfile @relation(fields: [laboratoryProfileId], references: [id])
  laboratoryProfileId       String            @db.ObjectId
  
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  effectiveDate             DateTime           @default(now())
  issuedDate                DateTime           @default(now())
  notes                     String?
  regulatoryTags            String[]
}